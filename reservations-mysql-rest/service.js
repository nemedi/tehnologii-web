function isValidPayload(Model, payload) {
	return Object.entries(Model.tableAttributes).reduce((valid, [name, field]) => {
		if (valid && 
			!field._autoGenerated
			&& !field.primaryKey
			&& !field.allowNull
			&& !payload[name]) {
			valid = false;
		}
		return valid;
	}, true);
}

async function exists(Model, id) {
	return await Model.count({where: {id}}) === 1;
}

async function handleSelectRecords(Model, request, response) {
	let records = await Model.findAll();
	if (records.length > 0) {
		response.json(records);
	} else {
		response.status(204).send();
	}
}

async function handleSelectRecord(Model, request, response) {
	let record = await Model.findOne({where: {id: request.params.id}});
	if (record) {
		response.json(record);
	} else {
		response.status(404).send();
	}
}

async function handleCheckRecord(Model, request, response) {
	response.status(await exists(Model, request.params.id)? 200 : 404).send();
}

async function handleInsertRecord(Model, request, response) {
	if (isValidPayload(Model, request.body)) {
		let record = await Model.create(request.body);
		response.status(201)
			.location(`http://${request.headers['host']}${request.url}/${record.id}`)
			.send();
	} else {
		response.status(400).send();
	}
}

async function handleUpdateRecord(Model, request, response) {
	if (await exists(Model, request.params.id)) {
		if (isValidPayload(Model, request.body)) {
			await Model.update(request.body,
				{where: {id: request.params.id}});
			response.status(204).send();
		} else {
			response.status(400).send();
		}
	} else {
		response.status(404).send();
	}
}

async function handleDeleteRecord(Model, request, response) {
	if (await exists(Model, request.params.id)) {
		await Model.destroy({where: {id: request.params.id}});
		response.status(204).send();
	} else {
		response.status(404).send();
	}
}

async function handleSelectSubrecords(Model, Submodel, request, response) {
	let record = await Model.findOne({
			where: {id: request.params.id}
		}, {
			include: [{
				model: Submodel,
				attributes: [`${Submodel.name}Id`]
			}]
		});
	if (record) {
		const getSubrecords = `get${Submodel.tableName.charAt(0).toUpperCase()}${Submodel.tableName.substring(1)}`;
		let subrecords = await record[getSubrecords]();
		if (subrecords.length > 0) {
			response.status(200).json(subrecords);
		} else {
			response.status(204).send();
		}
	} else {
		response.status(404).send();
	}
}

async function handleInsertSubrecord(Model, Submodel, request, response) {
	try {
		let record = await Model.findByPk(request.params.id);
		if (record) {
			const addSubrecord = `add${Submodel.name.charAt(0).toUpperCase()}${Submodel.name.substring(1)}`;
			await record[addSubrecord](request.body[`${Submodel.name}Id`]);
			response.status(204).send();
		} else {
			response.status(404).send();
		}
	} catch (error) {
		response.status(500).json(error);
	}
}

async function handleDeleteSubrecords(Model, Submodel, request, response) {

}

async function handleDeleteSubrecord(Model, Submodel, request, response) {
	let record = await Model.findOne({where: {id: request.params.id}});
	if (record) {
		const getter = `get${toUpperCase(collection.charAt(0))}${collection.substring(1)}`;
		let subrecords = await record[getter]({where: {id: request.params.subid}});
		if (subrecords.shift()) {
			response.status(204).send();
		} else {
			response.status(404).send();
		}
	} else {
		response.status(404).send();
	}
}


module.exports = {
	handleSelectRecords,
	handleSelectRecord,
	handleCheckRecord,
	handleInsertRecord,
	handleUpdateRecord,
	handleDeleteRecord,
	handleSelectSubrecords,
	handleInsertSubrecord,
	handleDeleteSubrecords,
	handleDeleteSubrecord
};